name: EKS-Canary

on:
  push:
  workflow_dispatch:

env:
  AWS_REGION: us-east-2  # Centralized AWS region
  SERVICE_NAME: openfinance
  TEMPLATE_PATH: applicationsets.yaml
  # CELLS: 'cell-1,cell-2,cell-3'
  CELLS: 'cell-1'
  BAKE_TIME_BETWEEN_ONEBOX_AND_NORMAL_IN_SECONDS: 5
  BAKE_TIME_BETWEEN_CANARY_AND_STABLE_IN_SECONDS: 45 

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      aws_region: ${{ steps.set_region_output.outputs.aws_region }}
    steps:
      - uses: actions/checkout@v4.1.3
      - name: Set region output using environment file
        id: set_region_output
        run: |
          echo "aws_region=${{ env.AWS_REGION }}" >> $GITHUB_ENV
      - uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Set up Python
        uses: actions/setup-python@v5.1.0
        with:
          python-version: '3.8'
      - name: Install Python dependencies
        run: pip install pyyaml
      - name: Generate manifests
        env:
          serviceName: ${{ env.SERVICE_NAME }}
          templatePath: ${{ env.TEMPLATE_PATH }}
          cells: ${{ env.CELLS }}
          BAKE_TIME_BETWEEN_CANARY_AND_STABLE_IN_SECONDS: ${{ env.BAKE_TIME_BETWEEN_CANARY_AND_STABLE_IN_SECONDS }}
        run: python adapt_applicationsets.py
      - name: Upload Manifests
        uses: actions/upload-artifact@v4.3.2
        with:
          name: manifests
          path: modified_manifest_*.yaml

  deploy:
    needs: setup
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.1.3
      - name: Download Manifests
        uses: actions/download-artifact@v4.1.5
        with:
          name: manifests
          path: .
      - uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
      - name: Configure kubectl
        env:
          AWS_REGION: ${{ env.AWS_REGION }}
        run: aws eks update-kubeconfig --name management --region ${AWS_REGION}
      - name: Deploy Workloads Sequentially
        env:
          CELLS: ${{ env.CELLS }}
          BAKE_TIME_BETWEEN_ONEBOX_AND_NORMAL_IN_SECONDS: ${{ env.BAKE_TIME_BETWEEN_ONEBOX_AND_NORMAL_IN_SECONDS }}
          AWS_REGION: ${{ env.AWS_REGION }}
        run: |
          # Create an array based on CELLS value split by comma
          IFS=',' read -ra CELLS <<< "${CELLS}"

          for CELL in "${CELLS[@]}"; do
            echo "Veryfing ${CELL}"
            ALARM_STATE=$(aws cloudwatch describe-alarms --alarm-names "${CELL}-opf-high-severity-aggregate-rollback" --alarm-types CompositeAlarm --region ${AWS_REGION} --query "CompositeAlarms[0].StateValue" --output text)
            echo "Alarm state for ${CELL}: $ALARM_STATE"
            if [ "$ALARM_STATE" = "ALARM" ]; then
              echo "${CELL} normal workload failed"
              exit 1
            fi
          done
          
          for CELL in "${CELLS[@]}"; do
            echo "Deploying ${CELL}"
            kubectl apply -f modified_manifest_${CELL}_onebox.yaml
            echo "Waiting ${BAKE_TIME_BETWEEN_ONEBOX_AND_NORMAL_IN_SECONDS} seconds before checking alarm"
            echo "Monitoring ${CELL} onebox"
            sleep ${BAKE_TIME_BETWEEN_ONEBOX_AND_NORMAL_IN_SECONDS}
            ALARM_STATE=$(aws cloudwatch describe-alarms --alarm-names "${CELL}-opf-onebox-rollback-alarm" --alarm-types CompositeAlarm --region ${AWS_REGION} --query "CompositeAlarms[0].StateValue" --output text)
            echo "Alarm state for ${CELL}: $ALARM_STATE"
            if [ "$ALARM_STATE" = "ALARM" ]; then
              echo "${CELL} onebox workload failed"
              exit 1
            fi
            # kubectl apply -f modified_manifest_${CELL}_normal.yaml
            # # echo "Waiting ${BAKE_TIME_BETWEEN_ONEBOX_AND_NORMAL_IN_SECONDS} seconds before checking alarm"
            # # echo "Monitoring ${CELL} normal workload"
            # # sleep ${BAKE_TIME_BETWEEN_ONEBOX_AND_NORMAL_IN_SECONDS}
            # ALARM_STATE=$(aws cloudwatch describe-alarms --alarm-names "${CELL}-opf-high-severity-aggregate-rollback" --alarm-types CompositeAlarm --region ${AWS_REGION} --query "CompositeAlarms[0].StateValue" --output text)
            # echo "Alarm state for ${CELL}: $ALARM_STATE"
            # if [ "$ALARM_STATE" = "ALARM" ]; then
            #   echo "${CELL} normal workload failed"
            #   exit 1
            # fi
          done
