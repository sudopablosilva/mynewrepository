name: Invoke ECS

on:
  workflow_dispatch:

env:
  AWS_REGION: us-east-2  # Centralized AWS region

jobs:
  setup:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: '20.x'
      # - run: npm ci
      # or one-off:
      - run: npm install @aws-sdk/client-ecs

      - uses: actions/github-script@v7
        id: set-result
        with:
          script: return "Hello!"
          result-encoding: string
      - name: Get result
        run: echo "${{steps.set-result.outputs.result}}"

      - uses: aws-actions/configure-aws-credentials@v4.0.2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ env.AWS_REGION }}
          
      - uses: actions/github-script@v7
        id: invoke-ecs
        with:
          script: |
            const ECS_CLUSTER_NAME = 'meucluster';
            const ECS_SERVICE_NAME = 'meuservico';
            const QUERY_TIER_FILTER_STRING = "ico";
            const QUERY_ONEBOX_FILTER_STRING = "ico";
            
            const { ECSClient, ListServicesCommand, ListTaskSetsCommand } = require("@aws-sdk/client-ecs");
            const { env } = require('process');
            
            const client = new ECSClient({ region: 'us-east-2' });
            
            const getWorkerServices = async () => {
              const command = new ListServicesCommand({
                cluster: ECS_CLUSTER_NAME,
                queryString: `serviceArns[?contains(@, \`${ECS_SERVICE_NAME}\`) && contains(@, \`${QUERY_TIER_FILTER_STRING}\`) && !contains(@, \`onebox\`)]`,
              });
            
              const response = await client.send(command);
              const serviceArns = response.serviceArns?.map((arn) => arn.split('/').pop()) || [];
              return serviceArns[0] || '';
            };
            
            const getOneboxServices = async () => {
              const command = new ListServicesCommand({
                cluster: ECS_CLUSTER_NAME,
                queryString: `serviceArns[?contains(@, \`${ECS_SERVICE_NAME}\`) && contains(@, \`${QUERY_ONEBOX_FILTER_STRING}\`)]`,
              });
            
              const response = await client.send(command);
              return response.serviceArns || [];
            };
            
            const getTaskSets = async () => {
              const command = new ListTaskSetsCommand({
                cluster: ECS_CLUSTER_NAME,
                service: ECS_SERVICE_NAME,
              });
            
              const response = await client.send(command);
              return response.taskSets || [];
            };
            
            const main = async () => {
              const ECS_SERVICES_NAMES = await getWorkerServices();
              const ECS_ONEBOX_NAMES = await getOneboxServices();
            
              console.log(`ECS_SERVICES_NAMES=${ECS_SERVICES_NAMES}`);
              console.log(`ECS_ONEBOX_NAMES=${ECS_ONEBOX_NAMES.join(',')}`);
            
              const TASKSETS = await getTaskSets();
              const IS_WORKER_GRADUAL = TASKSETS.length > 0;
              console.log(`IS_WORKER_GRADUAL=${IS_WORKER_GRADUAL}`);
            };
            
            main();
